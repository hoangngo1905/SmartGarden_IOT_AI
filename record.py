import speech_recognition as sr
import pyaudio
import wave
import os
import threading
import time
import serial
from datetime import datetime
import serial.tools.list_ports

# Li·ªát k√™ c√°c c·ªïng Serial
ports = serial.tools.list_ports.comports()
for port in ports:
    print(f"T√¨m th·∫•y c·ªïng: {port.device}")

class VoiceCommandWateringSystem:
    def __init__(self, port="COM4", baud_rate=9600):
        self.recognizer = sr.Recognizer()
        self.microphone = sr.Microphone()
        self.is_listening = False

        # Kh·ªüi t·∫°o Serial
        try:
            self.arduino = serial.Serial(port, baud_rate, timeout=1)
            print(f"‚úÖ ƒê√£ k·∫øt n·ªëi v·ªõi Arduino tr√™n {port}")
            time.sleep(2)  
        except Exception as e:
            print(f"‚ö†Ô∏è Kh√¥ng th·ªÉ k·∫øt n·ªëi v·ªõi Arduino: {e}")
            self.arduino = None

        # ƒê·ªãnh nghƒ©a l·ªánh
        self.commands = {
            "b·∫≠t b∆°m": self.turn_pump_on,
            "m·ªü b∆°m": self.turn_pump_on,
            "t·∫Øt b∆°m": self.turn_pump_off,
            "ng·ª´ng b∆°m": self.turn_pump_off,
            "d·ª´ng l·∫°i": self.stop_listening
        }

        # ƒêi·ªÅu ch·ªânh ti·∫øng ·ªìn
        with self.microphone as source:
            print("üé§ Hi·ªáu ch·ªânh ti·∫øng ·ªìn... Gi·ªØ im l·∫∑ng!")
            self.recognizer.adjust_for_ambient_noise(source, duration=2)
            print("‚úÖ S·∫µn s√†ng nh·∫≠n l·ªánh!")

    def turn_pump_on(self):
        print("üü¢ B·∫¨T B∆†M!")
        if self.arduino:
            self.arduino.write(b'ON\n')
            print("‚û°Ô∏è ƒê√£ g·ª≠i l·ªánh B·∫¨T ƒë·∫øn Arduino")

    def turn_pump_off(self):
        print("üî¥ T·∫ÆT B∆†M!")
        if self.arduino:
            self.arduino.write(b'OFF\n')
            print("‚û°Ô∏è ƒê√£ g·ª≠i l·ªánh T·∫ÆT ƒë·∫øn Arduino")

    def stop_listening(self):
        print("‚èπÔ∏è D·ª´ng nghe l·ªánh.")
        self.is_listening = False

    def process_audio(self, audio_data):
        try:
            text = self.recognizer.recognize_google(audio_data, language="vi-VN")
            print(f"üéôÔ∏è ƒê√£ nghe th·∫•y: {text}")

            recognized = False
            for command, action in self.commands.items():
                if command in text.lower():
                    action()
                    recognized = True
                    break

            if not recognized:
                print("‚ö†Ô∏è Kh√¥ng hi·ªÉu l·ªánh. H√£y th·ª≠ l·∫°i!")
            return recognized
        except sr.UnknownValueError:
            print("‚ö†Ô∏è Kh√¥ng nh·∫≠n di·ªán ƒë∆∞·ª£c l·ªùi n√≥i.")
        except sr.RequestError as e:
            print(f"‚ö†Ô∏è L·ªói Google Speech Recognition: {e}")
        return False

    def listen_continuously(self):
        self.is_listening = True
        print("üéß ƒêang nghe l·ªánh... (N√≥i 'd·ª´ng l·∫°i' ƒë·ªÉ tho√°t)")
        
        while self.is_listening:
            with self.microphone as source:
                try:
                    print("üëÇ ƒêang l·∫Øng nghe...")
                    audio = self.recognizer.listen(source, timeout=5, phrase_time_limit=5)
                    self.process_audio(audio)
                except sr.WaitTimeoutError:
                    print("‚ö†Ô∏è Kh√¥ng nghe th·∫•y g√¨, ti·∫øp t·ª•c l·∫Øng nghe...")
                except Exception as e:
                    print(f"‚ö†Ô∏è L·ªói: {e}")

    def record_audio_file(self, duration=5, filename=None):
        if filename is None:
            filename = f"recording_{datetime.now().strftime('%Y%m%d_%H%M%S')}.wav"

        FORMAT = pyaudio.paInt16
        CHANNELS = 1
        RATE = 16000
        CHUNK = 1024

        audio = pyaudio.PyAudio()
        stream = audio.open(format=FORMAT, channels=CHANNELS, rate=RATE, input=True, frames_per_buffer=CHUNK)
        
        print(f"üéôÔ∏è Ghi √¢m trong {duration} gi√¢y...")
        frames = [stream.read(CHUNK) for _ in range(0, int(RATE / CHUNK * duration))]

        stream.stop_stream()
        stream.close()
        audio.terminate()

        waveFile = wave.open(filename, 'wb')
        waveFile.setnchannels(CHANNELS)
        waveFile.setsampwidth(audio.get_sample_size(FORMAT))
        waveFile.setframerate(RATE)
        waveFile.writeframes(b''.join(frames))
        waveFile.close()

        print(f"üíæ File l∆∞u t·∫°i: {filename}")
        return filename

    def recognize_from_file(self, filename):
        print(f"üîç ƒêang ph√¢n t√≠ch file {filename}...")
        with sr.AudioFile(filename) as source:
            audio = self.recognizer.record(source)
            return self.process_audio(audio)

    def __del__(self):
        if self.arduino and self.arduino.is_open:
            self.arduino.close()
            print("üîå ƒê√£ ƒë√≥ng k·∫øt n·ªëi Arduino.")

def main():
    port = input("Nh·∫≠p c·ªïng COM (v√≠ d·ª•: COM4): ") or "COM4"
    system = VoiceCommandWateringSystem(port=port)

    print("üîµ Ch·ªçn ch·∫ø ƒë·ªô:")
    print("1Ô∏è‚É£ Nghe tr·ª±c ti·∫øp li√™n t·ª•c")
    print("2Ô∏è‚É£ Ghi √¢m v√† ph√¢n t√≠ch")

    choice = input("Nh·∫≠p l·ª±a ch·ªçn (1 ho·∫∑c 2): ")

    if choice == "1":
        system.listen_continuously()
    elif choice == "2":
        duration = int(input("‚è≥ Nh·∫≠p th·ªùi gian ghi √¢m (gi√¢y): "))
        filename = system.record_audio_file(duration)
        system.recognize_from_file(filename)
    else:
        print("‚ö†Ô∏è L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá!")

if __name__ == "__main__":
    main()
